# vim: filetype=json ts=4 shiftwidth=4 expandtab

# Variables which will be loaded up by flume #
##############################################

avro_host : "0.0.0.0"
avro_port : 5000

##############################################

morphlines : [
    #
    # MORPHLINE 1
    #
    {
        id : morphline1
        importCommands : [ "org.kitesdk.**","com.scissor.custom.**" ]
        
        commands : [
            { logInfo { format : "FILTER INPUT RECORD: {}", args : ["@{}"] } }
            
            {
                addCurrentTime {
                    field: ts_in_morphline
                }
            }

            # { logInfo { format : "input iRECrd: {}", args : ["@{}"] } }


            #{ # Parse input attachment and emit a record for each input line               
                #readLine {
                    #charset : UTF-8
                #}
            #}

            #{ logInfo { format : "before java: {}", args : ["@{}"] } }
            #{ 
                #java {
                    #imports : "import java.util.*;"
                    #code: """
                    #// Update some custom metrics - see http://metrics.codahale.com/getting-started/
                    #context.getMetricRegistry().counter("myMetrics.myCounter").inc(1);
                    #context.getMetricRegistry().meter("myMetrics.myMeter").mark(1);
                    #context.getMetricRegistry().histogram("myMetrics.myHistogram").update(100);
                    #com.codahale.metrics.Timer.Context timerContext = context.getMetricRegistry().timer("myMetrics.myTimer").time();
                    #
                    #List tags = record.get("tags");
                    #List RSSI = record.get("RSSI");
                    #logger.debug("RSSI: {} for record: {}", RSSI, record); // log to SLF4J
                    #
                    #if (!RSSI.isEmpty()) {
                        #logger.debug("RSSI: {} is not Empty for record: {}", RSSI, record); // log to SLF4J
                        #String RSSI_string = (String) RSSI.get(0);
                        #int RSSI_val = Integer.parseInt(RSSI_string);
                        #if (RSSI_val < -80) {
                            #logger.debug("RSSI: {} smaller -80 for record: {}", RSSI, record); // log to SLF4J
                            #return true;
                        #}
                    #}
                    #
                    #//if (RSSI.contains("-69")) {
                        #//  logger.info("RSSI: {} contains -69 for record: {}", RSSI, record); // log to SLF4J
                        #//  return false;
                    #//}
                    #
                    #//logger.info("RSSI: {} for record: {}", RSSI, record); // log to SLF4J
                    #timerContext.stop(); // measure how much time the code block took
                    #return child.process(record); // pass record to next command in chain
                    #"""
                #}
            #}

            #{
                #java {
                    #imports : "import java.util.*;"
                    #code: """
#
                    #long ts_in_logstash = 0L;
                    #List l = record.get("ts_in_logstash");
                    #if (l != null) {
                        #// the entry is String
                        #ts_in_logstash = Long.parseLong((String) l.get(0));
                    #}
#
#
                    #long ts_in_ingest = 0L;
                    #l = record.get("ts_in_ingest");
                    #if (l != null) {
                        #// the entry is String
                        #ts_in_ingest = Long.parseLong((String) l.get(0));
                    #}
#
                    #long ts_in_filter = 0L;
                    #l = record.get("ts_in_filter");
                    #if (l != null) {
                        #// the entry is String
                        #ts_in_filter = Long.parseLong((String) l.get(0));
                    #}
#
                    #long ts_in_morphline = 0L;
                    #l = record.get("ts_in_morphline");
                    #if (l != null) {
                        #// the entry is Long
                        #ts_in_morphline = (Long) l.get(0);
                    #}
#
#
                    #logger.info("Logstash -> Ingest: " + (ts_in_ingest - ts_in_logstash) + "  /  Ingest -> Filter: " + (ts_in_filter - ts_in_ingest));
                    #logger.info("Filter -> Morphline: " + (ts_in_morphline - ts_in_filter));
#
                    #return child.process(record); // pass record to next command in chain
#
                    #"""
                #}
            #}

            #{ logInfo { format : "output record: {}", args : ["@{}"] } }

            {
                filter {
                    path : "/opt/flume-config/conf/filter/"
                    file : "filter_config.xml"
                    host : ${avro_host}
                    port : ${avro_port}
                    batchSize : 1
                }
            }

            {
                addCurrentTime {
                    field: ts_in_morphline_end
                }
            }

            {
                setValues {
                    _attachment_body : "@{}"
                }
            }

            {
                toByteArray {
                    field : _attachment_body
                }
            }

            { logInfo { format : "FILTER OUTPUT RECORD: {}", args : ["@{}"] } }

            {
                avroSink {
                    host : ${avro_host}
                    port : ${avro_port}
                    batchSize : 1
                }
            }

        ]
    }
]
