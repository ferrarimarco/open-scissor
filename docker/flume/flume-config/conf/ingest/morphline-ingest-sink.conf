# vim: filetype=json ts=4 shiftwidth=4 expandtab
#
avro_host = "0.0.0.0"
avro_port = 5000

morphlines : [
    {
        id : morphline1
        importCommands : [ "org.kitesdk.**","com.scissor.custom.**" ]
        
        commands : [
            
            { addCurrentTime { field : ts_in_ingest_sink } }


            # Parse input attachment and emit a record for each input line               
            { readJson {} }

            { logInfo { format : "INGEST INPUT RECORD: {}", args : ["@{}"] } }


            {
                extractJsonPaths {
                    flatten: true
                    paths: {
                        message: /message
                        topic: /topic
                        system: /system
                        log_type: /log_type
                        ts_in_logstash: /ts_in_logstash
                        ts_in_filebeat: /ts_in_filebeat
                        source: /source
                    }
                }
            }

            # convert the ts_in_filebeat field to unixTimeInMillis format
            {
                convertTimestamp {
                    field : ts_in_filebeat
                    inputFormats : ["yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"]
                    outputFormat : "unixTimeInMillis"
                }
            }

            # convert the ts_in_logstash field to unixTimeInMillis format
            {
                convertTimestamp {
                    field : ts_in_logstash
                    inputFormats : ["yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"]
                    outputFormat : "unixTimeInMillis"
                }
            }


            { generateUUID { field: myID } }


            {
                if {
                conditions : [
                    { contains { log_type : "env_RAD" } }
                ]
                then : [
                    #{ logInfo { format : "log_type  env_RAD received" } }
                    #{ logInfo { format : "input iRECrd: {}", args : ["@{}"] } }

                    {

# ----------------------------------------
# GROK env_RAD
grok {
    #dictionaryFiles : [/home/vagrant/java/kite/kite-morphlines/kite-morphlines-core/src/test/resources/grok-dictionaries]   
    dictionaryFiles : [/opt/flume-config/conf/grok-dictionaries]

    #expressions : { message : """%{GREEDYDATA:sendtime} %{WORD:Client_ID} %{WORD:Alert_Identifier} %{WORD:Severity} \"%{GREEDYDATA:Text}\" %{GREEDYDATA:kvpairs}""" }
    expressions : { message : """%{DATA:Reader}\t%{TIMESTAMP_ISO8601:sendtime}\t%{DATA:antenna}\t%{NOTSPACE:TagID} %{GREEDYDATA:kvpairs}""" }
}
# ----------------------------------------

                    }
                    #{ logInfo { format : "Before split" } }

                    # split key value pair string on blanks into an array of key value pairs

                    #{ logInfo { format : "Before splitKeyValue" } }

                    {
                        splitKeyValue { 
                            inputField : kvpairs
                            separator : "\t"
                            outputFieldPrefix : ""
                            addEmptyStrings : false
                            trim : true
                        } 
                    }

                    #{ logInfo { format : "input mRECrd: {}", args : ["@{}"] } }

                    # remove temporary work fields
                    {
                        setValues {
                            #key_value_pairs_string : []
                            key_value_array : []
                            kvpairs : []
                        }
                    }
                ]
                }
            }

            { 
                if {
                conditions : [
                    { contains { log_type : "cam_AGH_log" } }
                ]
                then : [
                    #{ logInfo { format : "log_typ cam_AGH_log received" } }

                    {

# ----------------------------------------
# GROK cam_AGH_log
grok {
    #dictionaryFiles : [/home/vagrant/java/kite/kite-morphlines/kite-morphlines-core/src/test/resources/grok-dictionaries]   
    dictionaryFiles : [/opt/flume-config/conf/grok-dictionaries]

    expressions : { message : """%{GREEDYDATA:sendtime} %{WORD:Client_ID} %{WORD:Alert_Identifier} %{WORD:Severity} \"%{GREEDYDATA:Text}\" %{GREEDYDATA:kvpairs}""" }
}
# ----------------------------------------

                    }
                    #{ logInfo { format : "Before split" } }

                    # split key value pair string on blanks into an array of key value pairs
                    { 
                        split {
                            inputField : kvpairs
                            outputField : key_value_array
                            separator : " "
                        }
                    }

                    #{ logInfo { format : "Before splitKeyValue" } }
                    #{ logInfo { format : "input FilRECrd: {}", args : ["@{}"] } }
                    {
                        if {
                        conditions : [
                            { equals {key_value_array : []} }
                        ]
                        then : [
                            {
                                splitKeyValue {
                                    inputField : kvpairs
                                    separator : "="
                                    outputFieldPrefix : ""
                                    addEmptyStrings : false
                                    trim : true
                                }
                            }
                        ]
                        else : [
                            {
                                splitKeyValue { 
                                    inputField : key_value_array
                                    separator : "="
                                    outputFieldPrefix : ""
                                    addEmptyStrings : false
                                    trim : true
                                }
                            }
                        ]
                        }
                    }

                    # remove temporary work fields
                    {
                        setValues {
                            #key_value_pairs_string : []
                            key_value_array : []
                            kvpairs : []
                        }
                    }
                ]
                }
            }


            { 
                if {
                conditions : [
                    { contains { log_type : "scada_error" } }
                ]
                then : [
                    #{ logInfo { format : "log_type scada_error received" } }

                    {

# ----------------------------------------
# GROK scada_error
grok {
    dictionaryFiles : [/opt/flume-config/conf/grok-dictionaries]

    expressions : { message : """%{DATA:date},%{DATA:time},%{WORD:Level},%{DATA:ErrorCode}:%{GREEDYDATA:Text}""" }
}
# ----------------------------------------

                    }
                ]
                }
            }

            { 
                if {
                conditions : [
                    { contains { log_type : "scada_SEA_transformer1" } }
                ]
                then : [
                    #{ logInfo { format : "log_type scada_SEA_tranformer1 received" } }

                    {

# ----------------------------------------
# GROK scada_SEA_tranformer1
grok {
    dictionaryFiles : [/opt/flume-config/conf/grok-dictionaries]

    expressions : { message : """%{NOTSPACE:date} %{TIME:time}[ \\t]t%{NUM_SCADA:col1}[ \\t]t%{NUM_SCADA:col2}[ \\t]t%{NUM_SCADA:col3}[ \\t]t%{NUM_SCADA:col4}[ \\t]t%{NUM_SCADA:col5}[ \\t]t%{NUM_SCADA:col6}[ \\t]t%{NUM_SCADA:col7}[ \\t]t%{NUM_SCADA:col8}[ \\t]t%{NUM_SCADA:col9}[ \\t]t%{NUM_SCADA:col10}[ \\t]t%{NUM_SCADA:col11}[ \\t]t%{NUM_SCADA:col12}[ \\t]t%{NUM_SCADA:col13}[ \\t]t%{NUM_SCADA:col14}[ \\t]t%{NUM_SCADA:col15}[ \\t]t%{NUM_SCADA:col16}[ \\t]t%{NUM_SCADA:col17}[ \\t]t%{NUM_SCADA:col18}[ \\t]t%{NUM_SCADA:col19}[ \\t]t%{NUM_SCADA:col20}[ \\t]t%{NUM_SCADA:col21}[ \\t]t%{NUM_SCADA:col22}[ \\t]t%{NUM_SCADA:col23}[ \\t]t%{NUM_SCADA:col24}[ \\t]t%{NUM_SCADA:col25}[ \\t]t%{NUM_SCADA:col26}[ \\t]t%{NUM_SCADA:col27}[ \\t]t%{NUM_SCADA:col28}[ \\t]t%{NUM_SCADA:col29}[ \\t]t%{NUM_SCADA:col30}[ \\t]t%{NUM_SCADA:col31}[ \\t]t%{NUM_SCADA:col32}[ \\t]t%{NUM_SCADA:col33}[ \\t]t%{NUM_SCADA:col34}[ \\t]t%{NUM_SCADA:col35}[ \\t]t%{NUM_SCADA:col36}[ \\t]t%{NUM_SCADA:col37}[ \\t]t%{NUM_SCADA:col38}[ \\t]t%{NUM_SCADA:col39}[ \\t]t%{NUM_SCADA:col40}[ \\t]t%{NUM_SCADA:col41}[ \\t]t%{NUM_SCADA:col42}[ \\t]t%{NUM_SCADA:col43}[ \\t]t%{NUM_SCADA:col44}[ \\t]t%{NUM_SCADA:col45}[ \\t]t%{NUM_SCADA:col46}[ \\t]t%{NUM_SCADA:col47}[ \\t]t%{NUM_SCADA:col48}[ \\t]t%{NUM_SCADA:col49}[ \\t]t%{NUM_SCADA:col50}[ \\t]t%{NUM_SCADA:col51}[ \\t]t%{NUM_SCADA:col52}[ \\t]t%{NUM_SCADA:col53}[ \\t]t%{NUM_SCADA:col54}[ \\t]t%{NUM_SCADA:col55}[ \\t]t%{NUM_SCADA:col56}[ \\t]t%{NUM_SCADA:col57}[ \\t]t%{NUM_SCADA:col58}[ \\t]t%{NUM_SCADA:col59}[ \\t]t%{NUM_SCADA:col60}[ \\t]t%{NUM_SCADA:col61}[ \\t]t%{NUM_SCADA:col62}[ \\t]t%{NUM_SCADA:col63}""" }
}
# ----------------------------------------

                    }
                ]
                }
            }

            {
                if {
                    conditions : [
                        { contains { log_type : "ASS_process_alarm_logs" } }
                    ]
                then : [
                    #{ logInfo { format : "log_type ASS_process_alarm_logs received" } }

                    {

# ----------------------------------------
# GROK ASS_process_alarm_logs
grok {
    dictionaryFiles : [/opt/flume-config/conf/grok-dictionaries]
    expressions : { message : """%{DATA:Date},%{DATA:Time},%{DATA:Message in ASCII code},%{DATA:Acknowledge time},%{DATA:Recovery time},%{DATA:Number of occurrence},%{DATA:Elapsed time},%{DATA:Alarm Level},%{DATA:Address 1},%{DATA:Address 2}""" }
}
# ----------------------------------------

                    }
                ]
                }
            }

            { 
                if {
                conditions : [
                    { contains { log_type : "ASS_sampled_process_data" } }
                ]
                then : [
                    #{ logInfo { format : "log_type ASS_sampled_process_data received" } }

                    {

# ----------------------------------------
# GROK ASS_sampled_process_data
grok {
    dictionaryFiles : [/opt/flume-config/conf/grok-dictionaries]
    #expressions : {
    #    message : """%{DATA:col1},%{DATA:Date},%{DATA:Time},%{DATA:Belt-MW00002},%{DATA:Belt-MW00003},%{DATA:Belt-MW00004},%{DATA:Belt-MW00005},%{DATA:Belt-MW00006},%{DATA:Belt-MW00007},%{DATA:Belt-MW00008},%{DATA:Belt-MW00009},%{DATA:Belt-MW00010},%{DATA:Belt-MW00014},%{DATA:Belt-MW00019},%{DATA:Belt-MW00020},%{DATA:Belt-MW00022},%{DATA:Belt-MW00023},%{DATA:Belt-MW00025},%{DATA:Belt-MW00026},%{DATA:Belt-MW00029},%{DATA:Belt-MW00030},%{DATA:Belt-MW00031},%{DATA:Belt-MW00032},%{DATA:Belt-MW00033},%{DATA:Belt-MW00034},%{DATA:Belt-MW00036},%{DATA:B-MX00037.00},%{DATA:B-MX00037.01},%{DATA:B-MX00037.02},%{DATA:B-MX00037.03},%{DATA:B-MX00037.04},%{DATA:B-MX00037.05},%{DATA:B-MX00037.06},%{DATA:B-MX00037.07},%{DATA:B-MX00037.08},%{DATA:B-MX00037.09},%{DATA:B-MX00037.10},%{DATA:B-MX00037.11},%{DATA:B-MX00037.12},%{DATA:B-MX00037.13},%{DATA:B-MX00038.11},%{DATA:B-MX00038.12},%{DATA:B-MX00038.13},%{DATA:B-MX00038.14},%{DATA:B-MX00038.15},%{DATA:B-MX00039.00},%{DATA:B-MX00039.01},%{DATA:B-MX00039.02},%{DATA:B-MX00039.03},%{DATA:B-MX00039.04},%{DATA:B-MX00039.05},%{DATA:B-MX00039.06},%{DATA:B-MX00039.07},%{DATA:B-MX00039.14},%{DATA:B-MX00039.15},%{DATA:B-MX00040.00},%{DATA:B-MX00040.01},%{DATA:B-MX00040.02},%{DATA:B-MX00040.03},%{DATA:B-MX00040.04},%{DATA:B-MX00040.05},%{DATA:B-MX00040.06},%{DATA:B-MX00040.07},%{DATA:B-MX00040.08},%{DATA:B-MX00040.09},%{DATA:B-MX00040.10},%{DATA:B-MX00041.01},%{DATA:B-MX00041.02},%{DATA:B-MX00041.09},%{DATA:B-MX00041.10},%{DATA:B-MX00041.11},%{DATA:B-MX00041.12},%{DATA:B-MX00041.13},%{DATA:B-MX00041.14},%{DATA:B-MX00041.05},%{DATA:B-MX00042.00},%{DATA:B-MX00042.02},%{DATA:B-MX00042.03},%{DATA:B-MX00042.04},%{DATA:B-MX00042.05},%{DATA:B-MX00042.11},%{DATA:B-MX00042.12},%{DATA:B-MX00042.13},%{DATA:B-MX00042.14},%{DATA:B-MX00042.15},%{DATA:B-MX00043.00},%{DATA:B-MX00043.01},%{DATA:B-MX00043.02},%{DATA:B-MX00043.03},%{DATA:B-MX00043.10},%{DATA:B-MX00043.11},%{DATA:B-MX00043.12},%{DATA:B-MX00043.13},%{DATA:B-MX00043.14},%{DATA:B-MX00043.15},%{DATA:B-MX00044.00},%{DATA:B-MX00044.01},%{DATA:B-MX00044.02},%{DATA:B-MX00044.03},%{DATA:B-MX00044.04},%{DATA:B-MX00044.05},%{DATA:B-MX00044.06}"""
    #}

    expressions : {
        message : """%{DATA:col1},%{DATA:col2},%{DATA:col3},%{DATA:col4},%{DATA:col5},%{DATA:col6},%{DATA:col7},%{DATA:col8},%{DATA:col9},%{DATA:col10},%{DATA:col11},%{DATA:col12},%{DATA:col13},%{DATA:col14},%{DATA:col15},%{DATA:col16},%{DATA:col17},%{DATA:col18},%{DATA:col19},%{DATA:col20},%{DATA:col21},%{DATA:col22},%{DATA:col23},%{DATA:col24},%{DATA:col25},%{DATA:col26},%{DATA:col27},%{DATA:col28},%{DATA:col29},%{DATA:col30},%{DATA:col31},%{DATA:col32},%{DATA:col33},%{DATA:col34},%{DATA:col35},%{DATA:col36},%{DATA:col37},%{DATA:col38},%{DATA:col39},%{DATA:col40},%{DATA:col41},%{DATA:col42},%{DATA:col43},%{DATA:col44},%{DATA:col45},%{DATA:col46},%{DATA:col47},%{DATA:col48},%{DATA:col49},%{DATA:col50},%{DATA:col51},%{DATA:col52},%{DATA:col53},%{DATA:col54},%{DATA:col55},%{DATA:col56},%{DATA:col57},%{DATA:col58},%{DATA:col59},%{DATA:col60},%{DATA:col61},%{DATA:col62},%{DATA:col63},%{DATA:col64},%{DATA:col65},%{DATA:col66},%{DATA:col67},%{DATA:col68},%{DATA:col69},%{DATA:col70},%{DATA:col71},%{DATA:col72},%{DATA:col73},%{DATA:col74},%{DATA:col75},%{DATA:col76},%{DATA:col77},%{DATA:col78},%{DATA:col79},%{DATA:col80},%{DATA:col81},%{DATA:col82},%{DATA:col83},%{DATA:col84},%{DATA:col85},%{DATA:col86},%{DATA:col87},%{DATA:col88},%{DATA:col89},%{DATA:col90},%{DATA:col91},%{DATA:col92},%{DATA:col93},%{DATA:col94},%{DATA:col95},%{DATA:col96},%{DATA:col97},%{DATA:col98},%{DATA:col99},%{DATA:col100},%{DATA:col101},%{GREEDYDATA:col102}"""
    }
}
# ----------------------------------------

                    }
                ]
                }
            }

            { 
                if {
                conditions : [
                    { contains { log_type : "ASS_exploitation_operations_log" } }
                ]
                then : [
                    #{ logInfo { format : "log_type ASS_exploitation_operations_log received" } }

                    {

# ----------------------------------------
# GROK ASS_exploitation_operations_log
grok {
    dictionaryFiles : [/opt/flume-config/conf/grok-dictionaries]

    expressions : {
        message : """%{DATA:Line number},%{DATA:Date},%{DATA:Time},%{DATA:User ID},%{DATA:Level},%{DATA:Screen},%{DATA:Part ID},%{DATA:Commentary},%{DATA:Action address},%{DATA:Sub information},%{DATA:Previous value},%{DATA:Change Value}"""
    }
}
# ----------------------------------------

                    }
                ]
                }
            }

            {
                if {
                conditions : [
                    { contains { log_type : "scada_SEA_transformer2" } }
                ]
                then : [
                    #{ logInfo { format : "log_type scada_SEA_tranformer2 received" } }

                    {

# ----------------------------------------
# GROK scada_SEA_transformer2
grok {
    dictionaryFiles : [/opt/flume-config/conf/grok-dictionaries]
    expressions : {
        source : """%{DATA:pre1}_%{DATA:pre2}_%{DATA:Q_P}_%{DATA:Line}_1_min_%{DATA:post}"""
    }
}
# ----------------------------------------

                    }
    
                    {
                        if { 
                        conditions : [
                            { contains { Line : "L1" } }
                        ]
                        then : [
                            {

# ----------------------------------------
# GROK L1
grok {
    dictionaryFiles : [/opt/flume-config/conf/grok-dictionaries]

    #expressions : { message : """%{NOTSPACE:date} %{TIME:time}\t%{NUM_SCADA:col1}\t%{NUM_SCADA:col2}\t%{NUM_SCADA:col3}\t%{GREEDYDATA:rest}""" }
    #expressions : {
    #    message : """%{NOTSPACE:date} %{TIME:time}\t%{NUM_SCADA:col1}\t%{NUM_SCADA:col2}\t%{NUM_SCADA:col3}\t%{NUM_SCADA:col4}\t%{NUM_SCADA:col5}\t%{NUM_SCADA:col6}\t%{NUM_SCADA:col7}\t%{NUM_SCADA:col8}\t%{NUM_SCADA:col9}\t%{NUM_SCADA:col10}\t%{NUM_SCADA:col11}\t%{NUM_SCADA:col12}\t%{NUM_SCADA:col13}\t%{NUM_SCADA:col14}\t%{NUM_SCADA:col15}\t%{NUM_SCADA:col16}\t%{NUM_SCADA:col17}\t%{NUM_SCADA:col18}\t%{NUM_SCADA:col19}\t%{NUM_SCADA:col20}\t%{NUM_SCADA:col21}\t%{NUM_SCADA:col22}\t%{NUM_SCADA:col23}\t%{NUM_SCADA:col24}\t%{NUM_SCADA:col25}\t%{NUM_SCADA:col26}\t%{NUM_SCADA:col27}\t%{NUM_SCADA:col28}\t%{NUM_SCADA:col29}\t%{NUM_SCADA:col30}\t%{NUM_SCADA:col31}\t%{NUM_SCADA:col32}\t%{NUM_SCADA:col33}\t%{NUM_SCADA:col34}\t%{NUM_SCADA:col35}\t%{NUM_SCADA:col36}\t%{NUM_SCADA:col37}\t%{NUM_SCADA:col38}\t%{NUM_SCADA:col39}\t%{NUM_SCADA:col40}\t%{NUM_SCADA:col41}\t%{NUM_SCADA:col42}\t%{NUM_SCADA:col43}\t%{NUM_SCADA:col44}\t%{NUM_SCADA:col45}\t%{NUM_SCADA:col46}\t%{NUM_SCADA:col47}\t%{NUM_SCADA:col48}\t%{NUM_SCADA:col49}\t%{NUM_SCADA:col50}\t%{NUM_SCADA:col51}\t%{NUM_SCADA:col52}\t%{NUM_SCADA:col53}\t%{NUM_SCADA:col54}\t%{NUM_SCADA:col55}\t%{NUM_SCADA:col56}\t%{NUM_SCADA:col57}\t%{NUM_SCADA:col58}\t%{NUM_SCADA:col59}\t%{NUM_SCADA:col60}\t%{NUM_SCADA:col61}\t%{NUM_SCADA:col62}\t%{NUM_SCADA:col63}"""
    #}
    expressions : {
        message : """%{NOTSPACE:date} %{TIME:time}\t%{NUM_SCADA:col1}\t%{NUM_SCADA:col2}\t%{NUM_SCADA:col3}\t%{NUM_SCADA:col4}\t%{NUM_SCADA:col5}\t%{NUM_SCADA:col6}\t%{NUM_SCADA:col7}\t%{NUM_SCADA:col8}\t%{NUM_SCADA:col9}\t%{NUM_SCADA:col10}\t%{NUM_SCADA:col11}\t%{NUM_SCADA:col12}\t%{NUM_SCADA:col13}\t%{NUM_SCADA:col14}\t%{NUM_SCADA:col15}\t%{NUM_SCADA:col16}\t%{NUM_SCADA:col17}\t%{NUM_SCADA:col18}\t%{NUM_SCADA:col19}\t%{NUM_SCADA:col20}\t%{NUM_SCADA:col21}\t%{NUM_SCADA:col22}\t%{NUM_SCADA:col23}\t%{NUM_SCADA:col24}\t%{NUM_SCADA:col25}\t%{NUM_SCADA:col26}\t%{NUM_SCADA:col27}"""
    }

    #expressions : {
    #    message : """%{NOTSPACE:date} %{TIME:time}[ \\t]t%{NUM_SCADA:col1}[ \\t]t%{NUM_SCADA:col2}[ \\t]t%{NUM_SCADA:col3}[ \\t]t%{NUM_SCADA:col4}[ \\t]t%{NUM_SCADA:col5}[ \\t]t%{NUM_SCADA:col6}[ \\t]t%{NUM_SCADA:col7}[ \\t]t%{NUM_SCADA:col8}[ \\t]t%{NUM_SCADA:col9}[ \\t]t%{NUM_SCADA:col10}[ \\t]t%{NUM_SCADA:col11}[ \\t]t%{NUM_SCADA:col12}[ \\t]t%{NUM_SCADA:col13}[ \\t]t%{NUM_SCADA:col14}[ \\t]t%{NUM_SCADA:col15}[ \\t]t%{NUM_SCADA:col16}[ \\t]t%{NUM_SCADA:col17}[ \\t]t%{NUM_SCADA:col18}[ \\t]t%{NUM_SCADA:col19}[ \\t]t%{NUM_SCADA:col20}[ \\t]t%{NUM_SCADA:col21}[ \\t]t%{NUM_SCADA:col22}[ \\t]t%{NUM_SCADA:col23}[ \\t]t%{NUM_SCADA:col24}[ \\t]t%{NUM_SCADA:col25}[ \\t]t%{NUM_SCADA:col26}[ \\t]t%{NUM_SCADA:col27}[ \\t]t%{NUM_SCADA:col28}[ \\t]t%{NUM_SCADA:col29}[ \\t]t%{NUM_SCADA:col30}[ \\t]t%{NUM_SCADA:col31}[ \\t]t%{NUM_SCADA:col32}[ \\t]t%{NUM_SCADA:col33}[ \\t]t%{NUM_SCADA:col34}[ \\t]t%{NUM_SCADA:col35}[ \\t]t%{NUM_SCADA:col36}[ \\t]t%{NUM_SCADA:col37}[ \\t]t%{NUM_SCADA:col38}[ \\t]t%{NUM_SCADA:col39}[ \\t]t%{NUM_SCADA:col40}[ \\t]t%{NUM_SCADA:col41}[ \\t]t%{NUM_SCADA:col42}[ \\t]t%{NUM_SCADA:col43}[ \\t]t%{NUM_SCADA:col44}[ \\t]t%{NUM_SCADA:col45}[ \\t]t%{NUM_SCADA:col46}[ \\t]t%{NUM_SCADA:col47}[ \\t]t%{NUM_SCADA:col48}[ \\t]t%{NUM_SCADA:col49}[ \\t]t%{NUM_SCADA:col50}[ \\t]t%{NUM_SCADA:col51}[ \\t]t%{NUM_SCADA:col52}[ \\t]t%{NUM_SCADA:col53}[ \\t]t%{NUM_SCADA:col54}[ \\t]t%{NUM_SCADA:col55}[ \\t]t%{NUM_SCADA:col56}[ \\t]t%{NUM_SCADA:col57}[ \\t]t%{NUM_SCADA:col58}[ \\t]t%{NUM_SCADA:col59}[ \\t]t%{NUM_SCADA:col60}[ \\t]t%{NUM_SCADA:col61}[ \\t]t%{NUM_SCADA:col62}[ \\t]t%{NUM_SCADA:col63}"""
    #}
}
# ----------------------------------------

                            }
                        ]
                        }
                    }

                    {
                        if {
                        conditions : [ 
                            { contains { Line : "L2" } }
                        ]
                        then : [
                            {

# ----------------------------------------
# GROK L2
grok {
    dictionaryFiles : [/opt/flume-config/conf/grok-dictionaries]

    expressions : {
        message : """%{NOTSPACE:date} %{TIME:time}\t%{NUM_SCADA:col1}\t%{NUM_SCADA:col2}\t%{NUM_SCADA:col3}\t%{NUM_SCADA:col4}\t%{NUM_SCADA:col5}\t%{NUM_SCADA:col6}\t%{NUM_SCADA:col7}\t%{NUM_SCADA:col8}\t%{NUM_SCADA:col9}\t%{NUM_SCADA:col10}\t%{NUM_SCADA:col11}\t%{NUM_SCADA:col12}\t%{NUM_SCADA:col13}\t%{NUM_SCADA:col14}\t%{NUM_SCADA:col15}"""
    }
}
# ----------------------------------------

                            }
                        ]
                        }
                    }
                    # remove temporary work fields
                    {
                        setValues {
                            pre1 : []
                            pre2 : []
                            Q_P : []
                            Line : []
                            post : []
                        }
                    }
                ]
                }
            }
            { 
                if {
                conditions : [
                    { contains { log_type : "scada-process-alarm" } }
                ]
                then : [
                    #{ logInfo { format : "log_type scada-process-alarm received" } }

                    {

# ----------------------------------------
# GROK scada-process-alarm
grok {
    dictionaryFiles : [/opt/flume-config/conf/grok-dictionaries]

    expressions : { message : """%{GREEDYDATA:Text}""" }
}
# ----------------------------------------

                    }
                ]
                }
            }

            { 
                if {
                conditions : [
                    { contains { log_type : "net_log1" } }
                ]
                then : [
                    #{ logInfo { format : "log_type net_log1 received" } }

                    {

# ----------------------------------------
# GROK net_log1
grok {
    #dictionaryFiles : [/home/vagrant/java/kite/kite-morphlines/kite-morphlines-core/src/test/resources/grok-dictionaries]   

    dictionaryFiles : [/opt/flume-config/conf/grok-dictionaries]

    expressions : {
        message : """%{WORD:content}, %{NUMBER:sendtime} %{WORD:Client_ID} %{WORD:Alert_Identifier} %{WORD:Severity} "%{GREEDYDATA:Text}" %{GREEDYDATA:kvpairs}"""
    }
    # the next line was agreed before but now sending something different
    #expressions : { message : """%{NUMBER:sendtime} %{WORD:Client_ID} %{WORD:Alert_Identifier} %{WORD:Severity} "%{GREEDYDATA:Text}" %{GREEDYDATA:kvpairs}""" }
}
# ----------------------------------------

                    }
                    #{ logInfo { format : "Before split" } }

                    # split key value pair string on blanks into an array of key value pairs
                    { 
                        split { 
                            inputField : kvpairs
                            outputField : key_value_array
                            separator : " "
                        }
                    }

                    #{ logInfo { format : "Before splitKeyValue" } }

                    {
                        splitKeyValue { 
                            inputField : key_value_array
                            separator : "="
                            outputFieldPrefix : ""
                            addEmptyStrings : false
                            trim : true
                        } 
                    }

                    # remove temporary work fields
                    {
                        setValues {
                            #key_value_pairs_string : []
                            key_value_array : []
                            kvpairs : []
                        }
                    }
                ]
                }
            }

            { addCurrentTime { field : ts_out_ingest_sink } }

            { logInfo { format : "INGEST OUTPUT RECORD: {}", args : ["@{}"] } }

            { setValues { _attachment_body : "@{}" } }

            { toByteArray { field : _attachment_body } }


            {
                avroSink {
                    host : ${avro_host}
                    port : ${avro_port}
                    batchSize : 100
                }
            }
        ]
    }
]

