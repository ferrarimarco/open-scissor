---
sudo: required

language: shell

services:
  - docker

matrix:
  fast_finish: true

jobs:
  include:
    - stage: linting
      script: find . -type f -iname "*.sh" | while read -r line; do echo "Linting $line"; docker run -v "$(pwd)":/mnt --rm koalaman/shellcheck:v0.4.7 "$line"; done
    - script: test/test-docker-images.sh --docker-context-path=docker --only=lint-dockerfile
    - script: test/test-docker-images.sh --docker-context-path=docker --only=lint-shell
    - stage: build images
      after_success: test/tag-push-docker.sh
      script: docker-compose --file docker/docker-compose.yml build $IMAGE_NAME
      env:
        - IMAGE_NAME="zookeeper"
    - after_success: test/tag-push-docker.sh
      script:
        - docker-compose --file docker/docker-compose.yml build $IMAGE_NAME
      env:
        - IMAGE_NAME="kafka"
    - after_success: test/tag-push-docker.sh
      script: docker-compose --file docker/docker-compose.yml build $IMAGE_NAME
      env:
        - IMAGE_NAME="flume"
    - after_success: test/tag-push-docker.sh
      script: docker-compose --file docker/docker-compose.yml build $IMAGE_NAME
      env:
        - IMAGE_NAME="semantics"
    - after_success: test/tag-push-docker.sh
      script: docker-compose --file docker/docker-compose.yml build $IMAGE_NAME
      env:
        - IMAGE_NAME="logstash"
    - after_success: test/tag-push-docker.sh
      script: docker-compose --file docker/docker-compose.yml build $IMAGE_NAME
      env:
        - IMAGE_NAME="logstash24"
    - after_success: test/tag-push-docker.sh
      script: docker-compose --file docker/docker-compose.yml build $IMAGE_NAME
      env:
        - IMAGE_NAME="datasource24"
    - after_success: test/tag-push-docker.sh
      script: docker-compose --file docker/docker-compose.yml build $IMAGE_NAME
      env:
        - IMAGE_NAME="d-streamon-master"
    - after_success: test/tag-push-docker.sh
      script: docker-compose --file docker/docker-compose.yml build $IMAGE_NAME
      env:
        - IMAGE_NAME="d-streamon-slave"
    - after_success: test/tag-push-docker.sh
      script: docker-compose --file docker/docker-compose.yml build $IMAGE_NAME
      env:
        - IMAGE_NAME="prelude-manager-db"
    - after_success: test/tag-push-docker.sh
      script: docker-compose --file docker/docker-compose.yml build $IMAGE_NAME
      env:
        - IMAGE_NAME="prelude-manager"
    - after_success: test/tag-push-docker.sh
      script: docker-compose --file docker/docker-compose.yml build $IMAGE_NAME
      env:
        - IMAGE_NAME="event-correlator"
    - after_success: test/tag-push-docker.sh
      script: docker-compose --file docker/docker-compose.yml build $IMAGE_NAME
      env:
        - IMAGE_NAME="prewikka"
    - after_success: test/tag-push-docker.sh
      script: docker-compose --file docker/docker-compose.yml build $IMAGE_NAME
      env:
        - IMAGE_NAME="kafka-idmef-converter"
    - after_success: test/tag-push-docker.sh
      script: docker-compose --file docker/docker-compose.yml build $IMAGE_NAME
      env:
        - IMAGE_NAME="raw-data-analyzer"
    - script: docker-compose --file docker/docker-compose.yml build $IMAGE_NAME
      env:
        - IMAGE_NAME="kafka-prelude-connector"
    - stage: run integration tests
      after_failure: docker-compose --file docker/docker-compose.yml logs
      before_install:
        - gem install inspec -v 2.1.30
        - sudo curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
      script: test/test-docker-images.sh --docker-context-path=./docker --only=integration --skip-build

stages:
  - linting
  - build images
  - run integration tests
